name: Process Golf Booking Queue

on:
  schedule:
    # Run every morning at 6:55 AM
    - cron: '55 10 * * *'
    
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  process-booking-queue:
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK_AVAILABLE: ${{ secrets.DISCORD_WEBHOOK_URL != '' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm' # This caches the global npm cache
      
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      
      - name: Cache Playwright browsers
        id: cache-playwright-browsers # Added id
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      
      - name: Install project dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
          
      - name: Install Playwright browser and OS dependencies
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: |
          npx playwright install chromium
          npx playwright install-deps chromium
  
      - name: Process booking queue
        id: process-queue
        run: |
          npx ts-node process-queue.ts
        env:
          GOLF_USERNAME: ${{ secrets.GOLF_USERNAME }}
          GOLF_PASSWORD: ${{ secrets.GOLF_PASSWORD }}
          DATE_OVERRIDE: ${{ secrets.DATE_OVERRIDE }}
          TAKE_SCREENSHOTS: ${{ secrets.TAKE_SCREENSHOTS }}
          IS_SCHEDULED_RUN: ${{ github.event_name != 'schedule' }}
      
      - name: List screenshots
        id: list_screenshots
        continue-on-error: true
        run: |
          if compgen -G "logs/*.png" > /dev/null; then
            files=$(printf "%s," logs/*.png)
            files=${files%,}                     # trim trailing comma
            echo "files_list=$files" >> "$GITHUB_OUTPUT"
          else
            echo "No screenshots found"
            echo "files_list=" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: ${{ env.TAKE_SCREENSHOTS != 'false' }}
        with:
          name: booking-screenshots
          path: logs/*.png
          if-no-files-found: ignore
          retention-days: 7
      
      - name: Commit updated queue
        id: auto_commit_queue # Added id
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update booking queue after processing
          file_pattern: booking-queue.json

      - name: Prepare attachments for Discord
        id: prepare_discord_attachments
        if: steps.list_screenshots.outputs.files_list != ''
        shell: bash
        run: |
          IFS=',' read -ra files <<< "${{ steps.list_screenshots.outputs.files_list }}"

          # Build a JSON array, e.g. [{"file":"logs/a.png","name":"a.png"}, â€¦]
          json='['
          for file in "${files[@]}"; do
            file=$(echo "$file" | xargs)                # trim spaces
            name=$(basename "$file")
            json+='{"file":"'"$file"'","name":"'"$name"'"},'
          done
          json=${json%,}']'                            # drop trailing comma, close array
          echo "attachments_json=$json" >> "$GITHUB_OUTPUT"

      - name: Send Images to Discord
        if: steps.prepare_discord_attachments.outputs.attachments_json != '' && env.DISCORD_WEBHOOK_AVAILABLE == 'true'
        uses: MineBartekSA/discord-webhook@v2
        id: discord_webhook
        continue-on-error: true
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          content: |
            **Booking run:** ${{ steps.process-queue.outputs.booking_status }}
            Requests processed: ${{ steps.process-queue.outputs.processed_count }}
            ---
            ${{ steps.process-queue.outputs.results }}
          attachment: ${{ steps.prepare_discord_attachments.outputs.attachments_json }}
